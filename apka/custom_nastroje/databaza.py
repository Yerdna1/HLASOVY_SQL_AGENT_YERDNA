
"""N√°stroj na dopytovanie datab√°zy s konverziou prirodzen√©ho jazyka na SQL."""

"""N√°stroj na dopytovanie datab√°zy s konverziou prirodzen√©ho jazyka na SQL."""

"""N√°stroj na dopytovanie datab√°zy s konverziou prirodzen√©ho jazyka na SQL."""

"""N√°stroj na dopytovanie datab√°zy s konverziou prirodzen√©ho jazyka na SQL."""

"""N√°stroj na dopytovanie datab√°zy s konverziou prirodzen√©ho jazyka na SQL."""

import json # Add missing import
import chainlit as cl
from langchain.prompts import PromptTemplate
from pydantic import BaseModel, Field
from ultravox_client.session import ClientToolResult # Import ClientToolResult from specific module
# Removed incorrect ClientToolResult import

# Predpoklad√°me, ≈æe tieto bud√∫ dostupn√© po refaktoriz√°cii/preklade pr√≠slu≈°n√Ωch modulov
# Pou≈æ√≠vame priamo db_konfiguracia namiesto aliasu db_config
from apka.settings.databaza import db_konfiguracia, db_connection, dialect_info
from apka.widgets.LLM_modely import ziskaj_llm
from apka.widgets.spolocne import zapisovac
from apka.utils.schema_helper import POPIS_SCHEMY
from apka.models.sql_models import SQLDotaz


definicia_vykonaj_sql = {
    "name": "vykonaj_sql",
    "description": "Prevedie prirodzen√Ω jazyk na SQL a vykon√° dotaz v datab√°ze.",
    "parameters": {
        "type": "object",
        "properties": {
            "otazka": {
                "type": "string",
                "description": "Ot√°zka v prirodzenom jazyku t√Ωkaj√∫ca sa d√°t (napr. 'Uk√°≈æ mi v≈°etk√Ωch pou≈æ√≠vateƒæov, ktor√≠ sa pridali minul√Ω mesiac')",
            },
        },
        "required": ["otazka"],
    },
}


# Modify function signature to accept a single dictionary argument
async def spracuj_sql_dotaz(params: dict) -> str:
    """Prevedie prirodzen√Ω jazyk na SQL, vykon√° dotaz a vr√°ti v√Ωsledky."""
    # Extract otazka from the params dictionary
    otazka = params.get("otazka")
    if not otazka or not isinstance(otazka, str):
        error_msg = "Chyba: Ch√Ωbaj√∫ci alebo neplatn√Ω parameter 'otazka'."
        zapisovac.error(f"‚ùå {error_msg}")
        # Try sending error to Chainlit UI if possible
        try:
            await cl.Message(content=error_msg, type="error").send()
        except Exception as cl_err:
            zapisovac.error(f"Failed to send error message to Chainlit UI: {cl_err}")
        return f"Error: {error_msg}" # Return error string

    try:
        zapisovac.info(f"ü§î Spracov√°va sa dotaz v prirodzenom jazyku: '{otazka}'")

        llm = ziskaj_llm("sql_generation")
        strukturovany_llm = llm.with_structured_output(SQLDotaz)

        # Pou≈æ√≠vame priamo db_konfiguracia
        if not db_konfiguracia or not hasattr(db_konfiguracia, 'dialekt'):
             chyba = "Chyba: Konfigur√°cia datab√°zy (db_konfiguracia) nie je spr√°vne inicializovan√° alebo jej ch√Ωba atrib√∫t 'dialekt'."
             zapisovac.error(chyba)
             await cl.Message(content=chyba, type="error").send()
             return ClientToolResult(result=f"Error: {chyba}") # Wrap in ClientToolResult

        dialekt = db_konfiguracia.dialekt.lower()
        pomoc_k_dialektu = dialect_info.get(dialekt, {"notes": "", "examples": ""}) if dialect_info else {"notes": "", "examples": ""}


        systemova_sablona = f"""
        Ste expert na generovanie SQL dotazov pre {dialekt.upper()} datab√°zy. Preveƒète dan√∫ ot√°zku v prirodzenom jazyku na {dialekt.upper()}-kompatibiln√Ω SQL dotaz.
        Zabezpeƒçte, aby bol dotaz efekt√≠vny a dodr≈æiaval syntax a osvedƒçen√© postupy pre {dialekt.upper()}.

        # D√¥le≈æit√© pozn√°mky pre {dialekt.upper()}
        {pomoc_k_dialektu["notes"]}

        # Sch√©ma Datab√°zy
        {POPIS_SCHEMY}

        # Pr√≠kladov√© Dotazy pre {dialekt.upper()}
        {pomoc_k_dialektu["examples"]}

        # Ot√°zka
        {{otazka}}

        # √öloha
        1. Analyzujte ot√°zku a sch√©mu
        2. Vygenerujte {dialekt.upper()}-kompatibiln√Ω SQL dotaz
        3. Poskytnite struƒçn√© vysvetlenie, ƒço dotaz rob√≠
        4. Vr√°≈•te dotaz aj vysvetlenie
        """

        sablona_promptu = PromptTemplate(
            input_variables=["otazka"],
            template=systemova_sablona,
        )

        retazec = sablona_promptu | strukturovany_llm
        sql_odpoved: SQLDotaz = retazec.invoke({"otazka": otazka})

        # Zaznamena≈• vygenerovan√© SQL
        zapisovac.info(f"üí° Vygenerovan√Ω SQL dotaz: {sql_odpoved.dotaz}")
        zapisovac.info(f"üí° Vygenerovan√© SQL vysvetlenie: {sql_odpoved.vysvetlenie}")

        # Zoskupi≈• SQL dotaz a vysvetlenie do jednej spr√°vy s prvkami
        formatovany_sql = (
            sql_odpoved.dotaz.replace(" FROM ", "\nFROM ")
            .replace(" JOIN ", "\nJOIN ")
            .replace(" WHERE ", "\nWHERE ")
            .replace(" GROUP BY ", "\nGROUP BY ")
            .replace(" ORDER BY ", "\nORDER BY ")
        )

        await cl.Message(content=formatovany_sql, language="sql").send()
        await cl.Message(content=f"**Vysvetlenie:** {sql_odpoved.vysvetlenie}").send()

        # Vykonanie vygenerovan√©ho SQL dotazu pomocou spr√°vnej met√≥dy
        vysledok = db_connection.vykonaj_dotaz(sql_odpoved.dotaz)

        if "error" in vysledok:
            error_msg = f"Chyba pri vykon√°van√≠ dotazu: {vysledok['error']}"
            await cl.Message(content=f"‚ùå {error_msg}", type="error").send()
            return ClientToolResult(result=f"Error: {error_msg}") # Wrap in ClientToolResult

        if "rows" in vysledok:
            # Form√°tovanie v√Ωsledkov SELECT dotazu
            stlpce = vysledok["columns"]
            riadky = vysledok["rows"]

            if not riadky:
                msg = "Dotaz bol √∫spe≈°ne vykonan√Ω. Nena≈°li sa ≈æiadne v√Ωsledky."
                await cl.Message(content=msg).send()
                return ClientToolResult(result=msg) # Wrap in ClientToolResult

            # Vytvorenie markdown tabuƒæky pre lep≈°ie form√°tovanie
            hlavicka = "| " + " | ".join(f"**{str(stlpec)}**" for stlpec in stlpce) + " |"
            oddelovac = "|" + "|".join("---" for _ in stlpce) + "|"
            riadky_formatovane = ["| " + " | ".join(str(hodnota) for hodnota in riadok.values()) + " |" for riadok in riadky]

            tabulka = "\n".join([hlavicka, oddelovac] + riadky_formatovane)
            await cl.Message(content=f"**V√Ωsledky Dotazu:**\n\n{tabulka}").send()
            # Return summary string including JSON data wrapped in ClientToolResult
            try:
                # Convert rows (list of dicts) to JSON string
                data_json = json.dumps(riadky, ensure_ascii=False)
                # Return ONLY the JSON data string, wrapped in ClientToolResult
                return ClientToolResult(result=data_json)
            except Exception as json_e:
                zapisovac.error(f"Chyba pri konverzii v√Ωsledkov SQL na JSON: {json_e}")
                # Return an error message if JSON conversion fails
                return ClientToolResult(result=f"Dotaz √∫spe≈°ne vykonan√Ω, ale nastala chyba pri form√°tovan√≠ d√°t ({json_e}).")
        else:
            # Form√°tovanie v√Ωsledkov INSERT/UPDATE/DELETE
            sprava = f"‚úÖ Dotaz bol √∫spe≈°ne vykonan√Ω. Ovplyvnen√© riadky: {vysledok['affected_rows']}"
            await cl.Message(content=sprava).send()
            return ClientToolResult(result=sprava) # Wrap in ClientToolResult

    except Exception as e:
        chybova_sprava = f"Chyba pri spracovan√≠ dotazu: {str(e)}"
        zapisovac.error(f"‚ùå {chybova_sprava}")
        await cl.Message(content=chybova_sprava, type="error").send()
        return ClientToolResult(result=f"Error: {chybova_sprava}") # Wrap in ClientToolResult


vykonaj_sql = (definicia_vykonaj_sql, spracuj_sql_dotaz)
